.. title:: Appendices :: HTML documentation

====================================
Appendices
====================================

Appendix-A
=============

Python Scripting for DJMol Applications
-----------------------------------------

Since DJMol uses Python for its scripting (and in ASE), a basic knowledge of Python (version 3) is h
ighly appreciated. This appendix is based on the book, **Think Python** 2nd Edition by Allen B. Downey 
(Creative Commons Attribution-NonCommercial 3.0 Unported License). Some familiarity with programming is 
assumed for this appendix.

How to use Python within the DJMol?
.....................................

To use DJMol, Python is a mandate tool and it should be installed. For this, you have 
to install the Python (windows version 3 or later) immediately after the installation of the DJMol program into your system. See Appendix - 3 for its details (including the details of running a python in the DJMol) 

Basics of python scripting
............................

Python is designed as an interpreter language and it is widely used in scripting purposes. 
It supports both procedural and object-oriented paradigm. 

Variable assignment and Operators
.....................................

In Python variable assignment is performed by, = operator. It also provides operators, which are 
special symbols that represent operations like addition or multiplication. The operators +, -, /, and * 
perform addition, subtraction, division, and multiplication, respectively. And the operator ** performs 
exponentiation; that is, it raises a number to a power. An illustration (hopefully self-explanatory!) of 
these commands are following (here, >>> string represents a command prompt; for the comment one can use #).

.. code:: python

    >>> x=5
    >>> x
    5
    >>> x+2 # a comment 
    7
    >>> x-2
    3
    >>> x*2
    10
    >>> x**2
    25
    >>> x%2
    1
    >>> x/2
    2.5

Note that in numerical computation one need to use integers and decimals. Though it doesn't 
require explicit declaration of type of the variables, there may be times when you want to specify the type of a variable. This can be done with casting operation. 

Casting in python is therefore done using constructor functions:
    * int() - constructs an integer number from an integer literal, a float literal (by rounding down to the previous whole number), or a string literal (providing the string represents a whole number)
    * float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)
    * str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals

.. code:: python

    >>> a=1

    >>> type(a)
    <class 'int'>

    >>> b=3.1415

    >>> type(b)
    <class 'float'>

    >>> a+b
    4.141500000000001

    >>> b**b
    36.45491472872008

    >>> y = int(2.8)
    >>> y
    2

    >>> x = float(1)
    >>> x
    1.0

    >>> z = float("3")
    >>> z
    3.0

String, List, Methods etc.
..............................

Apart from **int**, **string** type is also used in python. Its initiation is simple 
(you can use either ‘ or “ to make string):

.. code:: python

    >>> my_string = 'thisStringI'
    >>> my_string
    'thisString'

    >>> my_string = "thisString"
    >>> my_string
    'thisString'

Like a string, a list is a sequence of values (perhaps it may be the Pythons most important 
built-in data type; unlike C or Fortran python does not have an **Array** data type). In a string, 
the values are characters; in a **list**, they can be **any type**. The values in a list are called 
**elements** or sometimes **items**. There are several ways to create a new list; the simplest is to 
enclose the elements in square brackets:

.. code:: python

    >>> a = 'is'
    >>> b = 'nice'
    >>> my_list = ['my', 'list', a, b]
    >>> my_list2 = [[4,5,6,7], [3,4,5,6]]

    >>> my_list[0]
    'my'

Note that a list can be used as an Array (and its index starts from 0 and not from 1, like a 
C array).

List Manipulation Rules
...........................

.. list-table:: 
    :widths: 20 20
    :header-rows: 0
    :align: center

    * - >>> my_list[0]
        'my'
      - Select the first item
    * - >>> my_list[1:3]
        ['list', 'is']
      - Select items at index 1 and 2
    * - >>> my_list[1:]
        ['list', 'is', 'nice']
      - Select items after index 0
    * - >>> my_list[:]
        ['my', 'list', 'is', 'nice']
      - Select items before index 3

List openrations
...................

.. code:: python

    >>> my_list + my_list
    ['my', 'list', 'is', 'nice', 'my', 'list', 'is', 'nice']

    >>> my_list * 2
    ['my', 'list', 'is', 'nice', 'my', 'list', 'is', 'nice']

Methods for the Lists 
......................

The Methods are equivalent to functions/subroutines; Since the List is an object a 
method for that list is called by a DOT (.) operator immediately after the Object name, as it is 
illustrated below:

.. list-table:: 
    :widths: 20 20
    :header-rows: 0
    :align: center

    * - >>> my_list.index(a)
        2
      - Get the index of an item 
    * - >>> my_list.count(a)
        1
      - Count an item 
    * - >>> my_list.append('NewOne')
      - Append an item at a time
    * - >>> my_list.remove('is')
      - Remove an item
    * - >>> my_list
        ['my', 'list', 'nice', 'NewOne']
      - It shows the appended List

Libraries
..........

In Python a good collection of libraries are available say, for doing math, 
or to do string/array manipulation, Numerical computations, graphics etc.

The math library of python can be imported like:

.. code:: python

    >>> import math

    >>> math.sqrt(9.99)
    3.1606961258558215

For ASE scripting, most of the times you need to use NumPy and Scipy libraries 
(and it is not shipped with standard Python, so one needs to install it, see the next appendix). 
If you installed NumPy you can call it like:

.. list-table:: 
    :widths: 20 20
    :header-rows: 0
    :align: center

    * - >>>import numpy
        Or 
        >>>import numpy as np
      - Importing NumPy Lib.
    * - >>> Array=np.array([[1, 2], [3, 4]])
      - Construct an array 
    * - >>> Array
        array([[1, 2],
              [3, 4]])
      - Print that array
    * - >>> np.transpose(Array)
        array([[1, 3],
              [2, 4]])
      - Transpose of the matrix
    * - >>> Array.dot(Array)
        array([[ 7, 10],
              [15, 22]])
      - Matrix multiplication

Basics of ASE scripting
------------------------

Hopefully one can be now understood ASE scripting. A sample ASE script is given below with some 
explanations. The aim is to calculate N2 molecular energy with EMT calculator (Effective Medium 
Potential, a crude empirical model generally used for testing purposes or for very large scale MD). 
Note that the following code has six lines (didn’t use line-breaker)

.. list-table:: 
    :widths: 20 20
    :header-rows: 0
    :align: center

    * - >>> from ase import Atoms 
      - Import Atoms object
    * - >>> from ase.calculators.emt import EMT
      - Import EMT 
    * - >>> d = 1.1 # Bond Length in Angstrom
            molecule = Atoms('2N', [(0., 0., 0.), (0., 0., d)]) 
      - Define a molecule with Atoms Object
    * - >>> molecule.set_calculator(EMT())
      - The molecule is attached with EMT
    * - >>> molecule.get_potential_energy()
      - Calculate PE
        (this Really invoke the EMT calculations)
    * - >>> print ('Nitrogen molecule energy: %5.2f eV' % e_molecule) 
      - Printing the PE

Note that the important step is to create the **Atoms object** - which is a collection of atoms. 
Everything else is based on this **Atoms object** (for example DFT **calculators** can be attached 
to this object to get DFT total energy).

A little more advanced example is following (an infinite gold wire with BL= 2.9A).

.. |wire| image:: _static/webdocimages/060.png
    :scale: 80%

.. list-table:: **Courtesy: ASE Camd**
   :widths: 20 15
   :header-rows: 0
   :align: center

   * - >>> from ase import Atoms
       >>> d = 2.9
       >>> L = 10.0
       >>> wire = Atoms('Au',
                  positions=[[0, L / 2, L / 2]],
                  cell=[d, L, L],
                  pbc=[1, 0, 0])
     - |wire|

A list of generally used GET/SET methods for the Atoms Object is:

.. list-table:: 
    :widths: 20 20
    :header-rows: 1
    :align: center

    * - GET Methods	
      - SET Methods
    * - get_atomic_numbers()
      - set_atomic_numbers()
    * - get_initial_charges()
      - set_initial_charges()
    * - get_charges()
      - set_chemical_symbols()
    * - get_chemical_symbols()
      - set_initial_magnetic_moments()
    * - get_initial_magnetic_moments()
      - set_masses()
    * - get_magnetic_moments()
      - set_momenta()
    * - get_masses()
      - set_positions()
    * - get_momenta()
      - set_scaled_positions()
    * - get_forces()
      - set_tags()
    * - get_positions()
      - set_velocities()
    * - get_potential_energies()
      -   
    * - get_scaled_positions()
      -    
    * - get_stresses()
      -   
    * - get_tags()
      -   
    * - get_velocities()
      -    

In essence, the **Set methods** are used to supply (the necessary) information for the **Atoms** object, 
whereas **Get methods** are applied to get useful information (usually after setting a calculator)

Appendix-B
=============

Installation of Python and NumPy
-----------------------------------------

As it is said before, one need to install Python (3.x, 64 bit) scripting language and NumPy 
on the system before the DJMol installation.

Using this tutorial, one is expected to get sufficient information on how to install a 
64 bit version of python 3and NumPy on a WindowsSystem.

Python Installation
.....................
  
#. First, download a 64 bit version of any 3.7.x from python.org. Clicking on the following link automatically downloads the required python
    https://www.python.org/ftp/python/3.7.2/python-3.7.2.
#. Install the above file with <pip> support, and for that select custom installation and check all the boxes in the Optional Features window.

.. figure:: _static/webdocimages/061.png
    :alt: 061
    :align: center
    :scale: 80%

Note: don't forget to check (See next figure) **“Add Python to environment variables”** for accessing python using the command prompt.

.. figure:: _static/webdocimages/062.png
    :alt: 062
    :align: center
    :scale: 80%

Python Modules Installations
..............................

After installing 3.X Python in Windows, you can simply open a command window 
(using Administrative privilege) and type:

**python -m pip install numpy**

**python -m pip install scipy**

**python -m pip install ase==3.17.0**

**python -m pip install matplotlib**

To install numpy, scipy, ase and matplotlib libraries (note: it will install 
latest versions except for ASE).

(For a specific installation you can also do:  

    **python -m pip install nameOfPackage==x.y.z** ,

where x,y,z are version numbers)

NumPy Installation
...................

If the above command: python -m pip install numpy fails, this method can be used to install 
the NumPy in Windows OS.

**Disclaimer:** Since NumPy doesn’t have an official build for windows, we’ll be downloading 
an unofficial version from https://www.lfd.uci.edu/ which is maintained by Christoph Gohlke, 
Laboratory for Fluorescence Dynamics, University of California, Irvine.

#. Download the .whl file of NumPy using the link to your Desktop.  Clicking on the following link automatically downloads the required python https://download.lfd.uci.edu/pythonlibs/r5uhg2lo/numpy-1.16.1+mkl-cp37-cp37m-win_amd64.whl

    If the file is not downloaded to the Desktop, Copy the <.whl> file to Desktop. 

    **Note:** If the above link is not working, goto

    https://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy 

    and download the 1.16.1 version of NumPy (Not Numpy-quaternion).

    .. figure:: _static/webdocimages/063.png
        :alt: 063
        :align: center
        :scale: 100%

#. Then run command prompt as administrator: Type  <cmd> in start menu and right click on command prompt and click on “Run as administrator” (See the next figure).

    .. figure:: _static/webdocimages/064.png
        :alt: 064
        :align: center
        :scale: 90%

#. Navigate to your Desktop where the <.whl> file is saved. Type the following command in your command prompt and press Enter.
    
    **cd %systemdrive%\\users\\%username%\\Desktop**
    
    Or manually find your Desktop path and enter like:
    
    **cd C:\\Users\\staff\\Desktop**

#. Install NumPy using the <.whl> file; Type this command in your command prompt and press Enter.
    
    **pip install "numpy-1.16.0+mkl-cp37-cp37m-win_amd64.whl"**